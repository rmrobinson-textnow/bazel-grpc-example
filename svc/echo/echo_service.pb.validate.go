// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/echo/v1/echo_service.proto

package bazel_example_echo_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _echo_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Phrase with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Phrase) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetValue()) > 256 {
		return PhraseValidationError{
			field:  "Value",
			reason: "value length must be at most 256 bytes",
		}
	}

	if !_Phrase_Value_Pattern.MatchString(m.GetValue()) {
		return PhraseValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[a-z]{2,5}$\"",
		}
	}

	if v, ok := interface{}(m.GetProcessingTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhraseValidationError{
				field:  "ProcessingTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PhraseValidationError is the validation error returned by Phrase.Validate if
// the designated constraints aren't met.
type PhraseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhraseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhraseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhraseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhraseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhraseValidationError) ErrorName() string { return "PhraseValidationError" }

// Error satisfies the builtin error interface
func (e PhraseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhrase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhraseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhraseValidationError{}

var _Phrase_Value_Pattern = regexp.MustCompile("^[a-z]{2,5}$")

// Validate checks the field values on EchoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EchoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPhrase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EchoRequestValidationError{
				field:  "Phrase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ValidateOnly

	// no validation rules for RequestId

	return nil
}

// EchoRequestValidationError is the validation error returned by
// EchoRequest.Validate if the designated constraints aren't met.
type EchoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoRequestValidationError) ErrorName() string { return "EchoRequestValidationError" }

// Error satisfies the builtin error interface
func (e EchoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoRequestValidationError{}

// Validate checks the field values on EchoResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EchoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPhrase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EchoResponseValidationError{
				field:  "Phrase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EchoResponseValidationError is the validation error returned by
// EchoResponse.Validate if the designated constraints aren't met.
type EchoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoResponseValidationError) ErrorName() string { return "EchoResponseValidationError" }

// Error satisfies the builtin error interface
func (e EchoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoResponseValidationError{}
